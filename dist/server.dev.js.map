{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bodyParser","multer","dotenv","path","config","app","port","process","env","PORT","use","json","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","Message","model","Schema","user","type","String","required","text","time","isPrivate","Boolean","toUser","post","single","res","body","message","save","status","send","error","get","username","query","find","$or","sort","messages","join","__dirname","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n// Set up file upload (for media files like images/videos)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected successfully'))\r\n  .catch((err) => console.log('Error connecting to MongoDB:', err));\r\n\r\n// Define Mongoose Models\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  user: { type: String, required: true },\r\n  text: { type: String },\r\n  file: { type: String }, // URL to the file\r\n  time: { type: Date, default: Date.now },\r\n  isPrivate: { type: Boolean, default: false },\r\n  toUser: { type: String }, // Private message recipient\r\n}));\r\n\r\n// Route to send a message (public or private)\r\napp.post('/send-message', upload.single('file'), async (req, res) => {\r\n  const { user, text, toUser, isPrivate } = req.body;\r\n  const file = req.file ? `/uploads/${req.file.filename}` : null;\r\n\r\n  // Logging for debugging to make sure the data is being received correctly\r\n  console.log('Received message data:', { user, text, toUser, isPrivate, file });\r\n\r\n  try {\r\n    const message = new Message({\r\n      user,\r\n      text,\r\n      file,\r\n      isPrivate,\r\n      toUser,\r\n    });\r\n\r\n    // Saving the message to the database\r\n    await message.save();\r\n\r\n    // If successful, log the success and send a response\r\n    console.log('Message saved to DB');\r\n    res.status(200).send({ message: 'Message sent successfully!' });\r\n  } catch (error) {\r\n    // If an error occurs, log it and send the error response\r\n    console.log('Error sending message:', error);\r\n    res.status(500).send({ message: 'Error sending message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages (or filtered messages based on user)\r\napp.get('/messages', async (req, res) => {\r\n  const { username } = req.query; // We can pass the `username` as a query parameter to filter messages\r\n\r\n  try {\r\n    let messages;\r\n\r\n    if (username) {\r\n      // If a username is provided, filter messages for that user (both public and private)\r\n      messages = await Message.find({\r\n        $or: [{ isPrivate: false }, { toUser: username }],\r\n      }).sort({ time: 1 });\r\n    } else {\r\n      // If no username is provided, return all messages (for admin or public view)\r\n      messages = await Message.find().sort({ time: 1 });\r\n    }\r\n\r\n    // Return the fetched messages in the response\r\n    res.json(messages);\r\n  } catch (error) {\r\n    // If an error occurs, log it and send the error response\r\n    console.log('Error fetching messages:', error);\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Serve static files (e.g., images, videos, etc.)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n\r\n"],"file":"server.dev.js"}