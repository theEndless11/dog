"use strict";var express=require("express"),mongoose=require("mongoose"),bodyParser=require("body-parser"),multer=require("multer"),dotenv=require("dotenv"),path=require("path");dotenv.config();var app=express(),port=process.env.PORT||3e3;app.use(bodyParser.json());var storage=multer.diskStorage({destination:function(e,r,s){s(null,"uploads/")},filename:function(e,r,s){s(null,Date.now()+"-"+r.originalname)}}),upload=multer({storage:storage});mongoose.connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(function(){return console.log("MongoDB connected successfully")}).catch(function(e){return console.log("Error connecting to MongoDB:",e)});var Message=mongoose.model("Message",new mongoose.Schema({user:{type:String,required:!0},text:{type:String},file:{type:String},time:{type:Date,default:Date.now},isPrivate:{type:Boolean,default:!1},toUser:{type:String}}));app.post("/send-message",upload.single("file"),function(r,s){var t,n,o,a,i,u,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,n=t.user,o=t.text,a=t.toUser,i=t.isPrivate,u=r.file?"/uploads/".concat(r.file.filename):null,console.log("Received message data:",{user:n,text:o,toUser:a,isPrivate:i,file:u}),e.prev=3,c=new Message({user:n,text:o,file:u,isPrivate:i,toUser:a}),e.next=7,regeneratorRuntime.awrap(c.save());case 7:console.log("Message saved to DB"),s.status(200).send({message:"Message sent successfully!"}),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(3),console.log("Error sending message:",e.t0),s.status(500).send({message:"Error sending message",error:e.t0});case 15:case"end":return e.stop()}},null,null,[[3,11]])}),app.get("/messages",function(r,s){var t,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.query.username,e.prev=1,t)return e.next=5,regeneratorRuntime.awrap(Message.find({$or:[{isPrivate:!1},{toUser:t}]}).sort({time:1}));e.next=8;break;case 5:n=e.sent,e.next=11;break;case 8:return e.next=10,regeneratorRuntime.awrap(Message.find().sort({time:1}));case 10:n=e.sent;case 11:s.json(n),e.next=18;break;case 14:e.prev=14,e.t0=e.catch(1),console.log("Error fetching messages:",e.t0),s.status(500).send({message:"Error fetching messages",error:e.t0});case 18:case"end":return e.stop()}},null,null,[[1,14]])}),app.use("/uploads",express.static(path.join(__dirname,"uploads"))),app.listen(port,function(){console.log("Server running on port ".concat(port))});
//# sourceMappingURL=server.min.js.map
